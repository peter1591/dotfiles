" vim: set fmr={{{,}}} fdls=0 fdm=marker:

"--------------------------------------------------------------------
" Plugins {{{
" Use vim-plug to manage.
call plug#begin('~/.vim/plugged')

" Sensible Default!
Plug 'tpope/vim-sensible'

" File navigation {{{
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" }}}

" Completions and diagnosis {{{
" Still too much trouble involving pyenv and system python for YCM auto
" recompile post-update, just do that manually!
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'
" }}}

" Fast formatting & moving around {{{
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdcommenter'
Plug 'sickill/vim-pasta'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
" Plug 'kana/vim-textobj-user'
" Plug 'kana/vim-textobj-entire' " ae ie
" Plug 'kana/vim-textobj-line' " al il
" Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'junegunn/vim-easy-align'
Plug 'wellle/targets.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'rhysd/clever-f.vim'
" }}}

" Buffers {{{
Plug 'ton/vim-bufsurf'
" }}}

" Misc {{{
" TODO(Darkpi): Consider vimfiler?
Plug 'Konfekt/FastFold'
Plug 'airblade/vim-gitgutter'
Plug 'jpalardy/vim-slime'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-startify'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'vim-scripts/restore_view.vim'
Plug 'hackel/vis'
Plug 'tpope/vim-fugitive'
" Plug 'takac/vim-hardtime'
Plug 'chrisbra/vim-diff-enhanced'
" }}}

" To consider list {{{
" Plug 'jeaye/color_coded'
" Plug 'tpope/vim-dispatch'
" Plug 'mtth/scratch.vim'
" }}}

" Language syntax/indent/compile/etc. {{{
Plug 'vim-scripts/ifdef-highlighting'
Plug 'gentoo/gentoo-syntax'
" One pack for all!!!
Plug 'sheerun/vim-polyglot'
Plug 'plasticboy/vim-markdown'
" }}}

call plug#end()
" }}}

"--------------------------------------------------------------------
" Vim settings {{{
set background=dark
set clipboard=
set completeopt=longest,menuone
set confirm
set colorcolumn=80
set encoding=utf8
set expandtab
set fcs=vert:\|
set fileencoding=utf8
set fileencodings=utf8,iso-8859-1,big5,cp950
set foldmethod=manual
set hidden
set hlsearch
set ignorecase
set incsearch
set lazyredraw
set list
set listchars=tab:»·,trail:·
set mouse=a
set nowrap
set ruler
set scrolloff=5
set sessionoptions-=curdir
set noshiftround
set shiftwidth=2
set showcmd
set smartcase
set smartindent
set softtabstop=2
set synmaxcol=200
set t_Co=256
set tabstop=2
set title
set titleold=
set ttimeoutlen=50
set viewoptions=cursor,folds,slash,unix
set virtualedit=block
set visualbell t_vb=
set wildmenu
set wildignore=*.o,*.so,*.swp,*~,*.pyc

set number
set relativenumber
highlight LineNr ctermfg=grey
nnoremap <C-N> :set number!<CR>:set relativenumber!<CR>

" TODO(Darkpi): See if there's better colorscheme available?
colorscheme torte
" }}}

"--------------------------------------------------------------------
" Colors {{{
highlight Folded ctermfg=243 ctermbg=234 guifg=Cyan guibg=DarkGrey
highlight FoldColumn ctermbg=234 guifg=Cyan guibg=Grey
" Custom auto-complete menu colors
highlight PmenuSel ctermfg=white ctermbg=20
highlight Pmenu ctermfg=252 ctermbg=17
highlight Normal ctermbg=none
highlight ColorColumn ctermbg=53
" }}}

"--------------------------------------------------------------------
" Status line {{{
highlight StatusLine cterm=none ctermbg=235
highlight StatusLineNC cterm=none ctermbg=233
highlight Status1C ctermfg=blue ctermbg=235
highlight Status2C ctermfg=red ctermbg=235
highlight Status3C ctermfg=yellow ctermbg=235
highlight Status4C ctermfg=green ctermbg=235
highlight Status1NC ctermfg=darkgray ctermbg=233
highlight Status2NC ctermfg=124 ctermbg=233
highlight Status3NC ctermfg=100 ctermbg=233
highlight Status4NC ctermfg=70 ctermbg=233
set laststatus=2
function! SetHighlight(nr)
  for i in [1,2,3,4]
    if (winnr() == a:nr)
      exec 'highlight! link Status'.i.' Status'.i.'C'
    else
      exec 'highlight! link Status'.i.' Status'.i.'NC'
    endif
  endfor
  return ''
endfunction
function! BuildStatusLine(nr)
  return '%{SetHighlight(' . a:nr . ')}' .
        \ '%=%#Status1#%F %#Status2#[%{&encoding}/%{&fileformat}/%Y]%#Status3# %l,%c %#Status4#%4P '
endfunction
set statusline=%!BuildStatusLine(winnr())
" }}}

"--------------------------------------------------------------------
" Abbreviations {{{
" TODO(Darkpi): Abbreviations for frequent typos.
" }}}

"--------------------------------------------------------------------
" Custom keybinding {{{
" Trying space as leader key, need to be careful not conflict with fzf
" bindings.
let mapleader="\<Space>"
let maplocalleader="\<Space>"
set pastetoggle=<F2>

" One less shift!
vnoremap ; :
nnoremap ; :

" Habit from normal text editor...
vnoremap <S-Up> <Up>
vnoremap <S-Down> <Down>

" Easier Replace
vnoremap <C-R> "hy:%s/<C-R>h//g<Left><Left>

vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" 0 is sooo much easier to type than ^, and ^ is more useful.
nnoremap 0 ^
nnoremap ^ 0
vnoremap 0 ^
vnoremap ^ 0

" Esc is sooo far away :D
inoremap jk <Esc>

" Close buffer without affecting window layout
nnoremap <Leader>q :bp\|bd #<CR>

" Quick load/save
nnoremap <Leader>w :w<CR>
nnoremap <Leader>e :e<CR>

" Copy/paste using system clipboard
noremap <Leader>y "+y
noremap <Leader>d "+d
noremap <Leader>p "+p
noremap <Leader>P "+P

nnoremap <silent> <Leader>/ :set hlsearch! hlsearch?<CR>

" To avoid C-a collision with tmux.
nnoremap + <C-a>
nnoremap - <C-x>

" Splits
" Maximize current split
" nnoremap <Leader>wm <C-w>_<C-w><Bar>
" Resize all split
" nnoremap <Leader>wr <C-w>=
" Fast split
nnoremap _ :split<CR><C-w>j
nnoremap <Bar> :vsplit<CR><C-w>l

" Reindent all code, while preserving cursor location
nnoremap <Leader>= mqHmwgg=G`wzt`q

" Toggle colorcolumn
function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    setlocal colorcolumn=80
  endif
endfunction

nnoremap <silent> <leader>tc :call g:ToggleColorColumn()<CR>

" Insert newline without entering insert mode
nnoremap <C-J> i<CR><Esc>k$

" Don't show me that stupid window :D
nnoremap q: :q

" }}}

"--------------------------------------------------------------------
" Temporary bindings for training. {{{
" cnoremap w <Nop>
" cnoremap tabe <Nop>
" inoremap <Esc> <Nop>
" inoremap <Left> <Nop>
" inoremap <Right> <Nop>
" inoremap <Up> <Nop>
" inoremap <Down> <Nop>
" inoremap <Home> <Nop>
" inoremap <End> <Nop>
" inoremap <PageUp> <Nop>
" inoremap <PageDown> <Nop>
" nnoremap <Left> <Nop>
" nnoremap <Right> <Nop>
" nnoremap <Up> <Nop>
" nnoremap <Down> <Nop>
" nnoremap <Home> <Nop>
" nnoremap <End> <Nop>
" nnoremap <PageUp> <Nop>
" nnoremap <PageDown> <Nop>
" }}}

"--------------------------------------------------------------------
" Autocmds {{{
augroup MyAutoCmd
  autocmd!
augroup END
autocmd MyAutoCmd BufWritePost .vimrc nested source $MYVIMRC
" }}}

"--------------------------------------------------------------------
" Misc utilities {{{
" Move swap/undo files. {{{
" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo,
  " then .
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undodir+=.
  set undofile
endif
" }}}

" Load default code {{{
" TODO(Darkpi): Pull these things into a custom plugin?
function! LoadDefaultCode()
  " Some code from embear/vim-localvimrc
  if (&buftype != "")
    return
  endif
  " TODO(Darkpi): Do we want to use %:e or &ft?
  let l:ext=expand('%:e')
  if empty(l:ext)
    return
  endif
  let l:directory=fnameescape(expand("%:p:h"))
  if empty(l:directory)
    let l:directory=fnameescape(getcwd())
  endif
  let l:paths=[".default", "templates/default"]
  for l:path in l:paths
    let l:ds=findfile(l:path.".".l:ext, l:directory.";", 1)
    if !empty(l:ds)
      exec "silent! 0r ".l:ds
      break
    endif
  endfor
endfunction

function! LoadDefaultCodeIfEmpty()
  if line('$') == 1 && col('$') == 1
    call LoadDefaultCode()
  endif
endfunction

autocmd MyAutoCmd BufNewFile * call LoadDefaultCode()
" Deal with file newed by nerdtree.
autocmd MyAutoCmd BufRead * call LoadDefaultCodeIfEmpty()
" }}}

" Bracketed paste mode {{{
let &t_ti .= "\<Esc>[?2004h"
let &t_te .= "\<Esc>[?2004l"

function! XTermPasteBegin(ret)
  set pastetoggle=<f29>
  set paste
  return a:ret
endfunction

execute "set <f28>=\<Esc>[200~"
execute "set <f29>=\<Esc>[201~"
map <expr> <f28> XTermPasteBegin("i")
imap <expr> <f28> XTermPasteBegin("")
vmap <expr> <f28> XTermPasteBegin("c")
cmap <f28> <nop>
cmap <f29> <nop>
" }}}
" }}}

"--------------------------------------------------------------------
" Plugin settings {{{
" NERDTree {{{
" Settings {{{
let NERDTreeWinSize=24
let NERDTreeIgnore=['\.o$', '\.a$', '\.d$[[file]]', '\.pyc', '\.swo', '\.swp', '\.un\~', '\.un', '\.git$[[dir]]']
" }}}
" Mappings {{{
nnoremap <S-Tab> :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeFind<CR>:wincmd p<CR>
" }}}
" Autocmds {{{
" Close vim if the only window open is nerdtree
autocmd MyAutoCmd BufEnter *
      \ if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" }}}
" }}}

" NERDCommenter {{{
" Settings {{{
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign='left'
" }}}
" Mappings {{{
nmap \ <Leader>c<Space>
vmap \ <Leader>c<Space>
" }}}
" }}}

" YouCompleteMe {{{
" Settings {{{
let g:ycm_confirm_extra_conf=0
let g:ycm_key_list_select_completion=['<TAB>']
let g:ycm_key_list_previous_completion=['<S-TAB>']
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
" }}}
" Mappings {{{
noremap <F5> :YcmForceCompileAndDiagnostics<CR>
inoremap <F5> <ESC>:YcmForceCompileAndDiagnostics<CR>
nnoremap <Leader>d :YcmCompleter GoToDeclaration<CR>
" }}}
" Autocmds {{{
autocmd MyAutoCmd BufWritePost * silent YcmForceCompileAndDiagnostics
" }}}
" }}}

" Syntastic {{{
" Settings {{{
let g:syntastic_always_populate_loc_list=1
let g:syntastic_mode_map={ 'mode': 'active',
      \ 'active_filetypes': [],
      \ 'passive_filetypes': ['html'] }
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_python_pylint_args='--rcfile=~/pylint.rc'
" }}}
" }}}

" EasyMotion {{{
" Settings {{{
let g:EasyMotion_move_highlight=0
let g:EasyMotion_smartcase=1
" }}}
" Mappings {{{
map <Leader>m <Plug>(easymotion-prefix)
map s <Plug>(easymotion-s2)
map / <Plug>(easymotion-sn)\v
omap / <Plug>(easymotion-tn)\v
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" }}}
" }}}

" DelimitMate {{{
" Settings {{{
let g:delimitMate_expand_cr=1
" }}}
" Mappings {{{
imap <C-D> <Plug>delimitMateJumpMany
" }}}
" Autocmds {{{
autocmd MyAutoCmd FileType vim let b:delimitMate_quotes = "'"
" }}}
" }}}

" vim-slime {{{
" Settings {{{
let g:slime_target="tmux"
let g:slime_no_mapping=1
" }}}
" Mappings {{{
vmap <Leader>ss <Plug>SlimeRegionSend
nmap <Leader>ss <Plug>SlimeParagraphSend
nmap <Leader>sc <Plug>SlimeConfig
" }}}
" }}}

" vim-gitgutter {{{
" Settings {{{
let g:gitgutter_sign_column_always=1
let g:gitgutter_map_keys=0
" }}}
" }}}

" fzf {{{
" Settings {{{
let g:fzf_command_prefix = 'FZF'
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'botright split',
      \ 'ctrl-v': 'botright vsplit' }
command! -bang -nargs=* FZFRg
  \ call fzf#vim#grep(
  \   'rg --no-heading --vimgrep --colors path:style:bold --colors path:fg:blue'.
  \   ' --colors line:style:bold --colors line:fg:black --colors match:fg:green'.
  \   ' --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)
" }}}
" Mappings {{{
nnoremap <Leader>b :FZFBuffers<CR>
nnoremap <Leader>c :FZFCommands<CR>
nnoremap <Leader><Space> :FZF<CR>
nnoremap <Leader>l :FZFBLines<CR>
nnoremap <Leader>g :FZFRg <C-R><C-W><CR>
nnoremap <Leader>h :FZFBLines <C-R><C-W><CR>
nnoremap <Leader>; :FZFHistory:<CR>
" }}}
" }}}

" undotree {{{
" Mappings {{{
nnoremap <Leader>u :UndotreeToggle<CR>
" }}}
" }}}

" vim-eunuch {{{
" Mappings {{{
cnoremap w!! SudoWrite
" }}}
" }}}

" vim-polyglot {{{
" Settings {{{
" for vim-cpp
let c_no_curly_error=1
" }}}
" Autocmds {{{
autocmd MyAutoCmd FileType python set softtabstop=2 tabstop=2 shiftwidth=2
" }}}
" }}}

" BufSurf {{{
" Mappings {{{
nnoremap Z :BufSurfBack<CR>
nnoremap X :BufSurfForward<CR>
" }}}
" }}}

" vim-startify {{{
" Settings {{{
let g:startify_change_to_dir=0
let g:startify_custom_header=[]
" }}}
" }}}

" vim-easy-align {{{
" Mappings {{{
xmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
" }}}
" }}}

" vim-pasta {{{
" Settings {{{
let g:pasta_disabled_filetypes = ["python", "coffee", "markdown", "yaml", "slim", "nerdtree", "make"]
" }}}
" }}}

" vim-autoformat {{{
" Settings {{{
let g:formatdef_yapf = "'yapf --style=\"{based_on_style:chromium,indent_width:'.&shiftwidth.(&textwidth ? ',column_limit:'.&textwidth : '').',ALLOW_MULTILINE_LAMBDAS: true, I18N_FUNCTION_CALL: func_not__exist}\" -l '.a:firstline.'-'.a:lastline"
" let g:formatdef_jsbeautify_json = '"js-beautify -b expand,preserve-inline -i -".(&expandtab ? "s ".shiftwidth() : "t")'
let g:formatdef_jsbeautify_json = '"(cd ~/factory_things/json; bundle exec format.rb)"'
let g:formatters_python=['yapf']
let g:formatters_javascript=['clangformat']
let g:autoformat_autoindent=0
let g:autoformat_retab=0
let g:autoformat_remove_trailing_spaces=0
" }}}
" Mappings {{{
vnoremap <Leader>f :Autoformat<CR>
nnoremap <Leader>f V:Autoformat<CR>
" }}}
" Autocmds {{{
autocmd BufNewFile,BufRead *.js set filetype=javascript
" }}}
" }}}

" vim-multiple-cursors {{{
" Settings {{{
let g:multi_cursor_exit_from_visual_mode=0
let g:multi_cursor_exit_from_insert_mode=0
" }}}
" }}}

" vim-hardtime {{{
" Settings {{{
let g:hardtime_default_on=1
let g:hardtime_maxcount=3
let g:hardtime_showmsg=1
let g:hardtime_allow_different_key=1
let g:list_of_normal_keys = ["h", "j", "k", "l", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_visual_keys = ["h", "j", "k", "l", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
" }}}
" }}}

" clever-f.vim {{{
" Settings {{{
let g:clever_f_fix_key_direction=1
" }}}
" }}}

" vim-markdown {{{
" Settings {{{
let g:vim_markdown_folding_disabled=1
" }}}
" }}}

" }}}
call localrc#load('.local.vimrc')
